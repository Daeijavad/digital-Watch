;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <alcd.h>
;
;// Declare your global variables here
;int hour = 10;
;int minute = 10;
;int second = 0;
;int milisecond = 0;
;int which_one = 1; //1 for hour     //2 for minute      //3 for second
;char lcd_str[20];
;
;
;void display_LCD()
; 0000 000F {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0010     lcd_gotoxy(0,0);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0011     sprintf(lcd_str,"%2d:%2d:%2d:%02d", hour, minute, second, milisecond);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0012     lcd_puts(lcd_str);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0013 }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0017 {
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0018     if(which_one == 1)
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0019     {
; 0000 001A         hour--;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 001B         if(hour == -1)
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 001C             hour = 23;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 001D     }
;PCODE: $00000039 VOL: 0
; 0000 001E     else if(which_one == 2)
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 001F     {
; 0000 0020         minute--;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0021         if(minute == -1)
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0022             minute = 59;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0023     }
;PCODE: $00000047 VOL: 0
; 0000 0024     else if(which_one == 3)
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0025     {
; 0000 0026         second--;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0027         if(second == -1)
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0028             second = 59;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0029     }
;PCODE: $00000055 VOL: 0
; 0000 002A 
; 0000 002B     display_LCD();
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 002C }
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0030 {
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0031     if(which_one == 1)
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0032     {
; 0000 0033         hour++;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0034         if(hour == 24)
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0035             hour = 0;
;PCODE: $00000068 VOL: 0
; 0000 0036     }
;PCODE: $00000069 VOL: 0
; 0000 0037     else if(which_one == 2)
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0038     {
; 0000 0039         minute++;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 003A         if(minute == 60)
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 003B             minute = 0;
;PCODE: $00000075 VOL: 0
; 0000 003C     }
;PCODE: $00000076 VOL: 0
; 0000 003D     else if(which_one == 3)
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 003E     {
; 0000 003F         second++;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0040         if(second == 60)
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0041             second = 0;
;PCODE: $00000082 VOL: 0
; 0000 0042     }
;PCODE: $00000083 VOL: 0
; 0000 0043 
; 0000 0044     display_LCD();
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0045 }
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;
;// External Interrupt 2 service routine
;interrupt [EXT_INT2] void ext_int2_isr(void)
; 0000 0049 {
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 004A     which_one++;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 004B     if(which_one == 4)
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 004C         which_one = 1;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 004D }
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0051 {
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0052     // Reinitialize Timer 0 value
; 0000 0053     TCNT0=0x06;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0054     // Place your code here
; 0000 0055     milisecond++;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0056     if(milisecond == 125)
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0057     {
; 0000 0058         milisecond = 0;
;PCODE: $000000A3 VOL: 0
; 0000 0059         second++;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 005A         if(second == 60)
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 005B         {
; 0000 005C             second = 0;
;PCODE: $000000AA VOL: 0
; 0000 005D             minute++;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 005E             if(minute == 60)
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 005F             {
; 0000 0060                 minute = 0;
;PCODE: $000000B1 VOL: 0
; 0000 0061                 hour++;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0062                 if(hour == 24)
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 0063                 {
; 0000 0064                     hour = 0;
;PCODE: $000000B8 VOL: 0
; 0000 0065                 }
; 0000 0066             }
;PCODE: $000000B9 VOL: 0
; 0000 0067         }
;PCODE: $000000BA VOL: 0
; 0000 0068     }
;PCODE: $000000BB VOL: 0
; 0000 0069     display_LCD();
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 006A }
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;
;void main(void)
; 0000 006D     {
;PCODE: $000000C1 VOL: 0
; 0000 006E     // Declare your local variables here
; 0000 006F 
; 0000 0070     // Input/Output Ports initialization
; 0000 0071     // Port A initialization
; 0000 0072     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0073     DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0074     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0075     PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0076 
; 0000 0077     // Port B initialization
; 0000 0078     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0079     DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 007A     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 007B     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 007C 
; 0000 007D     // Port C initialization
; 0000 007E     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 007F     DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0080     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0081     PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0082 
; 0000 0083     // Port D initialization
; 0000 0084     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0085     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0086     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0087     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0088 
; 0000 0089     // Timer/Counter 0 initialization
; 0000 008A     // Clock source: System Clock
; 0000 008B     // Clock value: 31.250 kHz
; 0000 008C     // Mode: Normal top=0xFF
; 0000 008D     // OC0 output: Disconnected
; 0000 008E     // Timer Period: 4 ms
; 0000 008F     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0090     TCNT0=0x83;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0091     OCR0=0x00;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0092 
; 0000 0093     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0094     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0095 
; 0000 0096     // External Interrupt(s) initialization
; 0000 0097     // INT0: On
; 0000 0098     // INT0 Mode: Any change
; 0000 0099     // INT1: On
; 0000 009A     // INT1 Mode: Any change
; 0000 009B     // INT2: On
; 0000 009C     // INT2 Mode: Falling Edge
; 0000 009D     GICR|=(1<<INT1) | (1<<INT0) | (1<<INT2);
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 009E     MCUCR=(0<<ISC11) | (1<<ISC10) | (0<<ISC01) | (1<<ISC00);
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 009F     MCUCSR=(0<<ISC2);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00A0     GIFR=(1<<INTF1) | (1<<INTF0) | (1<<INTF2);
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00A1 
; 0000 00A2     // Alphanumeric LCD initialization
; 0000 00A3     // Connections are specified in the
; 0000 00A4     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00A5     // RS - PORTA Bit 0
; 0000 00A6     // RD - PORTA Bit 1
; 0000 00A7     // EN - PORTA Bit 2
; 0000 00A8     // D4 - PORTA Bit 4
; 0000 00A9     // D5 - PORTA Bit 5
; 0000 00AA     // D6 - PORTA Bit 6
; 0000 00AB     // D7 - PORTA Bit 7
; 0000 00AC     // Characters/line: 16
; 0000 00AD     lcd_init(16);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00AE 
; 0000 00AF     // Global enable interrupts
; 0000 00B0     #asm("sei")
;PCODE: $000000E5 VOL: 0
	sei
;PCODE: $000000E6 VOL: 0
; 0000 00B1 
; 0000 00B2     lcd_gotoxy(0, 1);
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00B3     lcd_puts("Alireza");
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00B4 
; 0000 00B5     while (1)
;PCODE: $000000EE VOL: 0
; 0000 00B6     {
; 0000 00B7         // Place your code here
; 0000 00B8 
; 0000 00B9     }
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00BA }
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0

	.DSEG
_0x18:
	.BYTE 0x8
