
AVRASM ver. 2.1.30  C:\Users\Alireza\Desktop\AVR Project Watch\Debug\List\Watch.asm Tue Feb 18 22:27:24 2020

C:\Users\Alireza\Desktop\AVR Project Watch\Debug\List\Watch.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\Alireza\Desktop\AVR Project Watch\Debug\List\Watch.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\Alireza\Desktop\AVR Project Watch\Debug\List\Watch.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\Alireza\Desktop\AVR Project Watch\Debug\List\Watch.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\Alireza\Desktop\AVR Project Watch\Debug\List\Watch.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\Alireza\Desktop\AVR Project Watch\Debug\List\Watch.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\Alireza\Desktop\AVR Project Watch\Debug\List\Watch.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\Users\Alireza\Desktop\AVR Project Watch\Debug\List\Watch.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\Users\Alireza\Desktop\AVR Project Watch\Debug\List\Watch.asm(1096): warning: Register r12 already defined by the .DEF directive
C:\Users\Alireza\Desktop\AVR Project Watch\Debug\List\Watch.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _hour=R4
                 	.DEF _hour_msb=R5
                 	.DEF _minute=R6
                 	.DEF _minute_msb=R7
                 	.DEF _second=R8
                 	.DEF _second_msb=R9
                 	.DEF _milisecond=R10
                 	.DEF _milisecond_msb=R11
                 	.DEF _which_one=R12
                 	.DEF _which_one_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0050 	JMP  __RESET
000002 940c 009f 	JMP  _ext_int0_isr
000004 940c 00d0 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0103 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 00ef 	JMP  _ext_int2_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 000a
000034 000a      	.DB  0xA,0x0,0xA,0x0
000035 0000
000036 0000      	.DB  0x0,0x0,0x0,0x0
000037 0001      	.DB  0x1,0x0
                 
                 _0x0:
000038 3225
000039 3a64
00003a 3225
00003b 3a64      	.DB  0x25,0x32,0x64,0x3A,0x25,0x32,0x64,0x3A
00003c 3225
00003d 3a64
00003e 3025
00003f 6432      	.DB  0x25,0x32,0x64,0x3A,0x25,0x30,0x32,0x64
000040 4100
000041 696c
000042 6572
000043 617a      	.DB  0x0,0x41,0x6C,0x69,0x72,0x65,0x7A,0x61
C:\Users\Alireza\Desktop\AVR Project Watch\Debug\List\Watch.asm(1144): warning: .cseg .db misalignment - padding zero byte
000044 0000      	.DB  0x0
                 _0x2020003:
000045 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000046 000a      	.DW  0x0A
000047 0004      	.DW  0x04
000048 0066      	.DW  __REG_VARS*2
                 
000049 0008      	.DW  0x08
00004a 0160      	.DW  _0x18
00004b 0081      	.DW  _0x0*2+17
                 
00004c 0002      	.DW  0x02
00004d 017c      	.DW  __base_y_G101
00004e 008a      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
00004f 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000050 94f8      	CLI
000051 27ee      	CLR  R30
000052 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000053 e0f1      	LDI  R31,1
000054 bffb      	OUT  GICR,R31
000055 bfeb      	OUT  GICR,R30
000056 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000057 e08d      	LDI  R24,(14-2)+1
000058 e0a2      	LDI  R26,2
000059 27bb      	CLR  R27
                 __CLEAR_REG:
00005a 93ed      	ST   X+,R30
00005b 958a      	DEC  R24
00005c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005e e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005f e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000060 93ed      	ST   X+,R30
000061 9701      	SBIW R24,1
000062 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000063 e8ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000064 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000065 9185      	LPM  R24,Z+
000066 9195      	LPM  R25,Z+
000067 9700      	SBIW R24,0
000068 f061      	BREQ __GLOBAL_INI_END
000069 91a5      	LPM  R26,Z+
00006a 91b5      	LPM  R27,Z+
00006b 9005      	LPM  R0,Z+
00006c 9015      	LPM  R1,Z+
00006d 01bf      	MOVW R22,R30
00006e 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006f 9005      	LPM  R0,Z+
000070 920d      	ST   X+,R0
000071 9701      	SBIW R24,1
000072 f7e1      	BRNE __GLOBAL_INI_LOOP
000073 01fb      	MOVW R30,R22
000074 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000075 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000076 bfed      	OUT  SPL,R30
000077 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000078 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000079 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00007a e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007b 940c 013a 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;int hour = 10;
                 ;int minute = 10;
                 ;int second = 0;
                 ;int milisecond = 0;
                 ;int which_one = 1; //1 for hour     //2 for minute      //3 for second
                 ;char lcd_str[20];
                 ;
                 ;
                 ;void display_LCD()
                 ; 0000 000F {
                 
                 	.CSEG
                 _display_LCD:
                 ; .FSTART _display_LCD
                 ; 0000 0010     lcd_gotoxy(0,0);
00007d e0e0      	LDI  R30,LOW(0)
00007e 93ea      	ST   -Y,R30
00007f e0a0      	LDI  R26,LOW(0)
000080 940e 032b 	CALL _lcd_gotoxy
                 ; 0000 0011     sprintf(lcd_str,"%2d:%2d:%2d:%02d", hour, minute, second, milisecond);
000082 e6e8      	LDI  R30,LOW(_lcd_str)
000083 e0f1      	LDI  R31,HIGH(_lcd_str)
000084 93fa      	ST   -Y,R31
000085 93ea      	ST   -Y,R30
                +
000086 e7e0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000087 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000088 93fa      	ST   -Y,R31
000089 93ea      	ST   -Y,R30
00008a 01f2      	MOVW R30,R4
00008b 940e 03c3 	CALL SUBOPT_0x0
00008d 01f3      	MOVW R30,R6
00008e 940e 03c3 	CALL SUBOPT_0x0
000090 01f4      	MOVW R30,R8
000091 940e 03c3 	CALL SUBOPT_0x0
000093 01f5      	MOVW R30,R10
000094 940e 03c3 	CALL SUBOPT_0x0
000096 e180      	LDI  R24,16
000097 940e 02d7 	CALL _sprintf
000099 9664      	ADIW R28,20
                 ; 0000 0012     lcd_puts(lcd_str);
00009a e6a8      	LDI  R26,LOW(_lcd_str)
00009b e0b1      	LDI  R27,HIGH(_lcd_str)
00009c 940e 036a 	CALL _lcd_puts
                 ; 0000 0013 }
00009e 9508      	RET
                 ; .FEND
                 ;
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0017 {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
00009f 940e 03c8 	CALL SUBOPT_0x1
                 ; 0000 0018     if(which_one == 1)
0000a1 f461      	BRNE _0x3
                 ; 0000 0019     {
                 ; 0000 001A         hour--;
0000a2 01f2      	MOVW R30,R4
0000a3 9731      	SBIW R30,1
0000a4 012f      	MOVW R4,R30
                 ; 0000 001B         if(hour == -1)
0000a5 efef      	LDI  R30,LOW(65535)
0000a6 efff      	LDI  R31,HIGH(65535)
0000a7 15e4      	CP   R30,R4
0000a8 05f5      	CPC  R31,R5
0000a9 f419      	BRNE _0x4
                 ; 0000 001C             hour = 23;
0000aa e1e7      	LDI  R30,LOW(23)
0000ab e0f0      	LDI  R31,HIGH(23)
0000ac 012f      	MOVW R4,R30
                 ; 0000 001D     }
                 _0x4:
                 ; 0000 001E     else if(which_one == 2)
0000ad c021      	RJMP _0x5
                 _0x3:
0000ae e0e2      	LDI  R30,LOW(2)
0000af e0f0      	LDI  R31,HIGH(2)
0000b0 15ec      	CP   R30,R12
0000b1 05fd      	CPC  R31,R13
0000b2 f461      	BRNE _0x6
                 ; 0000 001F     {
                 ; 0000 0020         minute--;
0000b3 01f3      	MOVW R30,R6
0000b4 9731      	SBIW R30,1
0000b5 013f      	MOVW R6,R30
                 ; 0000 0021         if(minute == -1)
0000b6 efef      	LDI  R30,LOW(65535)
0000b7 efff      	LDI  R31,HIGH(65535)
0000b8 15e6      	CP   R30,R6
0000b9 05f7      	CPC  R31,R7
0000ba f419      	BRNE _0x7
                 ; 0000 0022             minute = 59;
0000bb e3eb      	LDI  R30,LOW(59)
0000bc e0f0      	LDI  R31,HIGH(59)
0000bd 013f      	MOVW R6,R30
                 ; 0000 0023     }
                 _0x7:
                 ; 0000 0024     else if(which_one == 3)
0000be c010      	RJMP _0x8
                 _0x6:
0000bf e0e3      	LDI  R30,LOW(3)
0000c0 e0f0      	LDI  R31,HIGH(3)
0000c1 15ec      	CP   R30,R12
0000c2 05fd      	CPC  R31,R13
0000c3 f459      	BRNE _0x9
                 ; 0000 0025     {
                 ; 0000 0026         second--;
0000c4 01f4      	MOVW R30,R8
0000c5 9731      	SBIW R30,1
0000c6 014f      	MOVW R8,R30
                 ; 0000 0027         if(second == -1)
0000c7 efef      	LDI  R30,LOW(65535)
0000c8 efff      	LDI  R31,HIGH(65535)
0000c9 15e8      	CP   R30,R8
0000ca 05f9      	CPC  R31,R9
0000cb f419      	BRNE _0xA
                 ; 0000 0028             second = 59;
0000cc e3eb      	LDI  R30,LOW(59)
0000cd e0f0      	LDI  R31,HIGH(59)
0000ce 014f      	MOVW R8,R30
                 ; 0000 0029     }
                 _0xA:
                 ; 0000 002A 
                 ; 0000 002B     display_LCD();
                 _0x9:
                 _0x8:
                 _0x5:
0000cf c05b      	RJMP _0x1D
                 ; 0000 002C }
                 ; .FEND
                 ;
                 ;// External Interrupt 1 service routine
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0030 {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
0000d0 940e 03c8 	CALL SUBOPT_0x1
                 ; 0000 0031     if(which_one == 1)
0000d2 f431      	BRNE _0xB
                 ; 0000 0032     {
                 ; 0000 0033         hour++;
0000d3 940e 03da 	CALL SUBOPT_0x2
                 ; 0000 0034         if(hour == 24)
0000d5 f411      	BRNE _0xC
                 ; 0000 0035             hour = 0;
0000d6 2444      	CLR  R4
0000d7 2455      	CLR  R5
                 ; 0000 0036     }
                 _0xC:
                 ; 0000 0037     else if(which_one == 2)
0000d8 c015      	RJMP _0xD
                 _0xB:
0000d9 e0e2      	LDI  R30,LOW(2)
0000da e0f0      	LDI  R31,HIGH(2)
0000db 15ec      	CP   R30,R12
0000dc 05fd      	CPC  R31,R13
0000dd f431      	BRNE _0xE
                 ; 0000 0038     {
                 ; 0000 0039         minute++;
0000de 940e 03e2 	CALL SUBOPT_0x3
                 ; 0000 003A         if(minute == 60)
0000e0 f411      	BRNE _0xF
                 ; 0000 003B             minute = 0;
0000e1 2466      	CLR  R6
0000e2 2477      	CLR  R7
                 ; 0000 003C     }
                 _0xF:
                 ; 0000 003D     else if(which_one == 3)
0000e3 c00a      	RJMP _0x10
                 _0xE:
0000e4 e0e3      	LDI  R30,LOW(3)
0000e5 e0f0      	LDI  R31,HIGH(3)
0000e6 15ec      	CP   R30,R12
0000e7 05fd      	CPC  R31,R13
0000e8 f429      	BRNE _0x11
                 ; 0000 003E     {
                 ; 0000 003F         second++;
0000e9 940e 03ea 	CALL SUBOPT_0x4
                 ; 0000 0040         if(second == 60)
0000eb f411      	BRNE _0x12
                 ; 0000 0041             second = 0;
0000ec 2488      	CLR  R8
0000ed 2499      	CLR  R9
                 ; 0000 0042     }
                 _0x12:
                 ; 0000 0043 
                 ; 0000 0044     display_LCD();
                 _0x11:
                 _0x10:
                 _0xD:
0000ee c03c      	RJMP _0x1D
                 ; 0000 0045 }
                 ; .FEND
                 ;
                 ;// External Interrupt 2 service routine
                 ;interrupt [EXT_INT2] void ext_int2_isr(void)
                 ; 0000 0049 {
                 _ext_int2_isr:
                 ; .FSTART _ext_int2_isr
0000ef 93ea      	ST   -Y,R30
0000f0 93fa      	ST   -Y,R31
0000f1 b7ef      	IN   R30,SREG
0000f2 93ea      	ST   -Y,R30
                 ; 0000 004A     which_one++;
0000f3 01f6      	MOVW R30,R12
0000f4 9631      	ADIW R30,1
0000f5 016f      	MOVW R12,R30
                 ; 0000 004B     if(which_one == 4)
0000f6 e0e4      	LDI  R30,LOW(4)
0000f7 e0f0      	LDI  R31,HIGH(4)
0000f8 15ec      	CP   R30,R12
0000f9 05fd      	CPC  R31,R13
0000fa f419      	BRNE _0x13
                 ; 0000 004C         which_one = 1;
0000fb e0e1      	LDI  R30,LOW(1)
0000fc e0f0      	LDI  R31,HIGH(1)
0000fd 016f      	MOVW R12,R30
                 ; 0000 004D }
                 _0x13:
0000fe 91e9      	LD   R30,Y+
0000ff bfef      	OUT  SREG,R30
000100 91f9      	LD   R31,Y+
000101 91e9      	LD   R30,Y+
000102 9518      	RETI
                 ; .FEND
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0051 {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000103 920a      	ST   -Y,R0
000104 921a      	ST   -Y,R1
000105 92fa      	ST   -Y,R15
000106 936a      	ST   -Y,R22
000107 937a      	ST   -Y,R23
000108 938a      	ST   -Y,R24
000109 939a      	ST   -Y,R25
00010a 93aa      	ST   -Y,R26
00010b 93ba      	ST   -Y,R27
00010c 93ea      	ST   -Y,R30
00010d 93fa      	ST   -Y,R31
00010e b7ef      	IN   R30,SREG
00010f 93ea      	ST   -Y,R30
                 ; 0000 0052     // Reinitialize Timer 0 value
                 ; 0000 0053     TCNT0=0x06;
000110 e0e6      	LDI  R30,LOW(6)
000111 bfe2      	OUT  0x32,R30
                 ; 0000 0054     // Place your code here
                 ; 0000 0055     milisecond++;
000112 01f5      	MOVW R30,R10
000113 9631      	ADIW R30,1
000114 015f      	MOVW R10,R30
                 ; 0000 0056     if(milisecond == 125)
000115 e7ed      	LDI  R30,LOW(125)
000116 e0f0      	LDI  R31,HIGH(125)
000117 15ea      	CP   R30,R10
000118 05fb      	CPC  R31,R11
000119 f489      	BRNE _0x14
                 ; 0000 0057     {
                 ; 0000 0058         milisecond = 0;
00011a 24aa      	CLR  R10
00011b 24bb      	CLR  R11
                 ; 0000 0059         second++;
00011c 940e 03ea 	CALL SUBOPT_0x4
                 ; 0000 005A         if(second == 60)
00011e f461      	BRNE _0x15
                 ; 0000 005B         {
                 ; 0000 005C             second = 0;
00011f 2488      	CLR  R8
000120 2499      	CLR  R9
                 ; 0000 005D             minute++;
000121 940e 03e2 	CALL SUBOPT_0x3
                 ; 0000 005E             if(minute == 60)
000123 f439      	BRNE _0x16
                 ; 0000 005F             {
                 ; 0000 0060                 minute = 0;
000124 2466      	CLR  R6
000125 2477      	CLR  R7
                 ; 0000 0061                 hour++;
000126 940e 03da 	CALL SUBOPT_0x2
                 ; 0000 0062                 if(hour == 24)
000128 f411      	BRNE _0x17
                 ; 0000 0063                 {
                 ; 0000 0064                     hour = 0;
000129 2444      	CLR  R4
00012a 2455      	CLR  R5
                 ; 0000 0065                 }
                 ; 0000 0066             }
                 _0x17:
                 ; 0000 0067         }
                 _0x16:
                 ; 0000 0068     }
                 _0x15:
                 ; 0000 0069     display_LCD();
                 _0x14:
                 _0x1D:
00012b df51      	RCALL _display_LCD
                 ; 0000 006A }
00012c 91e9      	LD   R30,Y+
00012d bfef      	OUT  SREG,R30
00012e 91f9      	LD   R31,Y+
00012f 91e9      	LD   R30,Y+
000130 91b9      	LD   R27,Y+
000131 91a9      	LD   R26,Y+
000132 9199      	LD   R25,Y+
000133 9189      	LD   R24,Y+
000134 9179      	LD   R23,Y+
000135 9169      	LD   R22,Y+
000136 90f9      	LD   R15,Y+
000137 9019      	LD   R1,Y+
000138 9009      	LD   R0,Y+
000139 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 006D     {
                 _main:
                 ; .FSTART _main
                 ; 0000 006E     // Declare your local variables here
                 ; 0000 006F 
                 ; 0000 0070     // Input/Output Ports initialization
                 ; 0000 0071     // Port A initialization
                 ; 0000 0072     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0073     DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
00013a e0e0      	LDI  R30,LOW(0)
00013b bbea      	OUT  0x1A,R30
                 ; 0000 0074     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0075     PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
00013c bbeb      	OUT  0x1B,R30
                 ; 0000 0076 
                 ; 0000 0077     // Port B initialization
                 ; 0000 0078     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0079     DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
00013d bbe7      	OUT  0x17,R30
                 ; 0000 007A     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 007B     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00013e bbe8      	OUT  0x18,R30
                 ; 0000 007C 
                 ; 0000 007D     // Port C initialization
                 ; 0000 007E     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 007F     DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
00013f bbe4      	OUT  0x14,R30
                 ; 0000 0080     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0081     PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000140 bbe5      	OUT  0x15,R30
                 ; 0000 0082 
                 ; 0000 0083     // Port D initialization
                 ; 0000 0084     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0085     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000141 bbe1      	OUT  0x11,R30
                 ; 0000 0086     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0087     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000142 bbe2      	OUT  0x12,R30
                 ; 0000 0088 
                 ; 0000 0089     // Timer/Counter 0 initialization
                 ; 0000 008A     // Clock source: System Clock
                 ; 0000 008B     // Clock value: 31.250 kHz
                 ; 0000 008C     // Mode: Normal top=0xFF
                 ; 0000 008D     // OC0 output: Disconnected
                 ; 0000 008E     // Timer Period: 4 ms
                 ; 0000 008F     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
000143 e0e4      	LDI  R30,LOW(4)
000144 bfe3      	OUT  0x33,R30
                 ; 0000 0090     TCNT0=0x83;
000145 e8e3      	LDI  R30,LOW(131)
000146 bfe2      	OUT  0x32,R30
                 ; 0000 0091     OCR0=0x00;
000147 e0e0      	LDI  R30,LOW(0)
000148 bfec      	OUT  0x3C,R30
                 ; 0000 0092 
                 ; 0000 0093     // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0094     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
000149 e0e1      	LDI  R30,LOW(1)
00014a bfe9      	OUT  0x39,R30
                 ; 0000 0095 
                 ; 0000 0096     // External Interrupt(s) initialization
                 ; 0000 0097     // INT0: On
                 ; 0000 0098     // INT0 Mode: Any change
                 ; 0000 0099     // INT1: On
                 ; 0000 009A     // INT1 Mode: Any change
                 ; 0000 009B     // INT2: On
                 ; 0000 009C     // INT2 Mode: Falling Edge
                 ; 0000 009D     GICR|=(1<<INT1) | (1<<INT0) | (1<<INT2);
00014b b7eb      	IN   R30,0x3B
00014c 6ee0      	ORI  R30,LOW(0xE0)
00014d bfeb      	OUT  0x3B,R30
                 ; 0000 009E     MCUCR=(0<<ISC11) | (1<<ISC10) | (0<<ISC01) | (1<<ISC00);
00014e e0e5      	LDI  R30,LOW(5)
00014f bfe5      	OUT  0x35,R30
                 ; 0000 009F     MCUCSR=(0<<ISC2);
000150 e0e0      	LDI  R30,LOW(0)
000151 bfe4      	OUT  0x34,R30
                 ; 0000 00A0     GIFR=(1<<INTF1) | (1<<INTF0) | (1<<INTF2);
000152 eee0      	LDI  R30,LOW(224)
000153 bfea      	OUT  0x3A,R30
                 ; 0000 00A1 
                 ; 0000 00A2     // Alphanumeric LCD initialization
                 ; 0000 00A3     // Connections are specified in the
                 ; 0000 00A4     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00A5     // RS - PORTA Bit 0
                 ; 0000 00A6     // RD - PORTA Bit 1
                 ; 0000 00A7     // EN - PORTA Bit 2
                 ; 0000 00A8     // D4 - PORTA Bit 4
                 ; 0000 00A9     // D5 - PORTA Bit 5
                 ; 0000 00AA     // D6 - PORTA Bit 6
                 ; 0000 00AB     // D7 - PORTA Bit 7
                 ; 0000 00AC     // Characters/line: 16
                 ; 0000 00AD     lcd_init(16);
000154 e1a0      	LDI  R26,LOW(16)
000155 940e 037b 	CALL _lcd_init
                 ; 0000 00AE 
                 ; 0000 00AF     // Global enable interrupts
                 ; 0000 00B0     #asm("sei")
000157 9478      	sei
                 ; 0000 00B1 
                 ; 0000 00B2     lcd_gotoxy(0, 1);
000158 e0e0      	LDI  R30,LOW(0)
000159 93ea      	ST   -Y,R30
00015a e0a1      	LDI  R26,LOW(1)
00015b 940e 032b 	CALL _lcd_gotoxy
                 ; 0000 00B3     lcd_puts("Alireza");
                +
00015d e6a0     +LDI R26 , LOW ( _0x18 + ( 0 ) )
00015e e0b1     +LDI R27 , HIGH ( _0x18 + ( 0 ) )
                 	__POINTW2MN _0x18,0
00015f 940e 036a 	CALL _lcd_puts
                 ; 0000 00B4 
                 ; 0000 00B5     while (1)
                 _0x19:
                 ; 0000 00B6     {
                 ; 0000 00B7         // Place your code here
                 ; 0000 00B8 
                 ; 0000 00B9     }
000161 cfff      	RJMP _0x19
                 ; 0000 00BA }
                 _0x1C:
000162 cfff      	RJMP _0x1C
                 ; .FEND
                 
                 	.DSEG
                 _0x18:
000160           	.BYTE 0x8
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
000163 93ba      	ST   -Y,R27
000164 93aa      	ST   -Y,R26
000165 931a      	ST   -Y,R17
000166 930a      	ST   -Y,R16
000167 81aa      	LDD  R26,Y+2
000168 81bb      	LDD  R27,Y+2+1
000169 9612      	ADIW R26,2
00016a 940e 0443 	CALL __GETW1P
00016c 9730      	SBIW R30,0
00016d f159      	BREQ _0x2000010
00016e 81aa      	LDD  R26,Y+2
00016f 81bb      	LDD  R27,Y+2+1
000170 9614      	ADIW R26,4
000171 940e 0443 	CALL __GETW1P
000173 018f      	MOVW R16,R30
000174 9730      	SBIW R30,0
000175 f061      	BREQ _0x2000012
                +
000176 3002     +CPI R16 , LOW ( 2 )
000177 e0e0     +LDI R30 , HIGH ( 2 )
000178 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000179 f098      	BRLO _0x2000013
00017a 01f8      	MOVW R30,R16
00017b 9731      	SBIW R30,1
00017c 018f      	MOVW R16,R30
                +
00017d 81aa     +LDD R26 , Y + 2
00017e 81bb     +LDD R27 , Y + 2 + 1
00017f 9614     +ADIW R26 , 4
000180 93ed     +ST X + , R30
000181 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000182 81aa      	LDD  R26,Y+2
000183 81bb      	LDD  R27,Y+2+1
000184 9612      	ADIW R26,2
000185 91ed      	LD   R30,X+
000186 91fd      	LD   R31,X+
000187 9631      	ADIW R30,1
000188 93fe      	ST   -X,R31
000189 93ee      	ST   -X,R30
00018a 9731      	SBIW R30,1
00018b 81ac      	LDD  R26,Y+4
00018c 83a0      	STD  Z+0,R26
                 _0x2000013:
00018d 81aa      	LDD  R26,Y+2
00018e 81bb      	LDD  R27,Y+2+1
00018f 940e 0443 	CALL __GETW1P
000191 23ff      	TST  R31
000192 f02a      	BRMI _0x2000014
000193 91ed      	LD   R30,X+
000194 91fd      	LD   R31,X+
000195 9631      	ADIW R30,1
000196 93fe      	ST   -X,R31
000197 93ee      	ST   -X,R30
                 _0x2000014:
000198 c006      	RJMP _0x2000015
                 _0x2000010:
000199 81aa      	LDD  R26,Y+2
00019a 81bb      	LDD  R27,Y+2+1
00019b efef      	LDI  R30,LOW(65535)
00019c efff      	LDI  R31,HIGH(65535)
00019d 93ed      	ST   X+,R30
00019e 93fc      	ST   X,R31
                 _0x2000015:
00019f 8119      	LDD  R17,Y+1
0001a0 8108      	LDD  R16,Y+0
0001a1 9625      	ADIW R28,5
0001a2 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
0001a3 93ba      	ST   -Y,R27
0001a4 93aa      	ST   -Y,R26
0001a5 9726      	SBIW R28,6
0001a6 940e 0450 	CALL __SAVELOCR6
0001a8 e010      	LDI  R17,0
0001a9 85ac      	LDD  R26,Y+12
0001aa 85bd      	LDD  R27,Y+12+1
0001ab e0e0      	LDI  R30,LOW(0)
0001ac e0f0      	LDI  R31,HIGH(0)
0001ad 93ed      	ST   X+,R30
0001ae 93fc      	ST   X,R31
                 _0x2000016:
0001af 89ea      	LDD  R30,Y+18
0001b0 89fb      	LDD  R31,Y+18+1
0001b1 9631      	ADIW R30,1
0001b2 8bea      	STD  Y+18,R30
0001b3 8bfb      	STD  Y+18+1,R31
0001b4 9731      	SBIW R30,1
0001b5 91e4      	LPM  R30,Z
0001b6 2f2e      	MOV  R18,R30
0001b7 30e0      	CPI  R30,0
0001b8 f409      	BRNE PC+2
0001b9 c115      	RJMP _0x2000018
0001ba 2fe1      	MOV  R30,R17
0001bb 30e0      	CPI  R30,0
0001bc f439      	BRNE _0x200001C
0001bd 3225      	CPI  R18,37
0001be f411      	BRNE _0x200001D
0001bf e011      	LDI  R17,LOW(1)
0001c0 c002      	RJMP _0x200001E
                 _0x200001D:
0001c1 940e 03f2 	CALL SUBOPT_0x5
                 _0x200001E:
0001c3 c10a      	RJMP _0x200001B
                 _0x200001C:
0001c4 30e1      	CPI  R30,LOW(0x1)
0001c5 f4a9      	BRNE _0x200001F
0001c6 3225      	CPI  R18,37
0001c7 f419      	BRNE _0x2000020
0001c8 940e 03f2 	CALL SUBOPT_0x5
0001ca c102      	RJMP _0x20000CC
                 _0x2000020:
0001cb e012      	LDI  R17,LOW(2)
0001cc e040      	LDI  R20,LOW(0)
0001cd e000      	LDI  R16,LOW(0)
0001ce 322d      	CPI  R18,45
0001cf f411      	BRNE _0x2000021
0001d0 e001      	LDI  R16,LOW(1)
0001d1 c0fc      	RJMP _0x200001B
                 _0x2000021:
0001d2 322b      	CPI  R18,43
0001d3 f411      	BRNE _0x2000022
0001d4 e24b      	LDI  R20,LOW(43)
0001d5 c0f8      	RJMP _0x200001B
                 _0x2000022:
0001d6 3220      	CPI  R18,32
0001d7 f411      	BRNE _0x2000023
0001d8 e240      	LDI  R20,LOW(32)
0001d9 c0f4      	RJMP _0x200001B
                 _0x2000023:
0001da c002      	RJMP _0x2000024
                 _0x200001F:
0001db 30e2      	CPI  R30,LOW(0x2)
0001dc f439      	BRNE _0x2000025
                 _0x2000024:
0001dd e050      	LDI  R21,LOW(0)
0001de e013      	LDI  R17,LOW(3)
0001df 3320      	CPI  R18,48
0001e0 f411      	BRNE _0x2000026
0001e1 6800      	ORI  R16,LOW(128)
0001e2 c0eb      	RJMP _0x200001B
                 _0x2000026:
0001e3 c003      	RJMP _0x2000027
                 _0x2000025:
0001e4 30e3      	CPI  R30,LOW(0x3)
0001e5 f009      	BREQ PC+2
0001e6 c0e7      	RJMP _0x200001B
                 _0x2000027:
0001e7 3320      	CPI  R18,48
0001e8 f010      	BRLO _0x200002A
0001e9 332a      	CPI  R18,58
0001ea f008      	BRLO _0x200002B
                 _0x200002A:
0001eb c007      	RJMP _0x2000029
                 _0x200002B:
0001ec e0aa      	LDI  R26,LOW(10)
0001ed 9f5a      	MUL  R21,R26
0001ee 2d50      	MOV  R21,R0
0001ef 2fe2      	MOV  R30,R18
0001f0 53e0      	SUBI R30,LOW(48)
0001f1 0f5e      	ADD  R21,R30
0001f2 c0db      	RJMP _0x200001B
                 _0x2000029:
0001f3 2fe2      	MOV  R30,R18
0001f4 36e3      	CPI  R30,LOW(0x63)
0001f5 f449      	BRNE _0x200002F
0001f6 940e 03f9 	CALL SUBOPT_0x6
0001f8 89e8      	LDD  R30,Y+16
0001f9 89f9      	LDD  R31,Y+16+1
0001fa 81a4      	LDD  R26,Z+4
0001fb 93aa      	ST   -Y,R26
0001fc 940e 03ff 	CALL SUBOPT_0x7
0001fe c0ce      	RJMP _0x2000030
                 _0x200002F:
0001ff 37e3      	CPI  R30,LOW(0x73)
000200 f441      	BRNE _0x2000032
000201 940e 03f9 	CALL SUBOPT_0x6
000203 940e 0405 	CALL SUBOPT_0x8
000205 940e 03aa 	CALL _strlen
000207 2f1e      	MOV  R17,R30
000208 c00a      	RJMP _0x2000033
                 _0x2000032:
000209 37e0      	CPI  R30,LOW(0x70)
00020a f461      	BRNE _0x2000035
00020b 940e 03f9 	CALL SUBOPT_0x6
00020d 940e 0405 	CALL SUBOPT_0x8
00020f 940e 03b6 	CALL _strlenf
000211 2f1e      	MOV  R17,R30
000212 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000213 6002      	ORI  R16,LOW(2)
000214 770f      	ANDI R16,LOW(127)
000215 e030      	LDI  R19,LOW(0)
000216 c034      	RJMP _0x2000036
                 _0x2000035:
000217 36e4      	CPI  R30,LOW(0x64)
000218 f011      	BREQ _0x2000039
000219 36e9      	CPI  R30,LOW(0x69)
00021a f411      	BRNE _0x200003A
                 _0x2000039:
00021b 6004      	ORI  R16,LOW(4)
00021c c002      	RJMP _0x200003B
                 _0x200003A:
00021d 37e5      	CPI  R30,LOW(0x75)
00021e f431      	BRNE _0x200003C
                 _0x200003B:
00021f e5e4      	LDI  R30,LOW(_tbl10_G100*2)
000220 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000221 83ee      	STD  Y+6,R30
000222 83ff      	STD  Y+6+1,R31
000223 e015      	LDI  R17,LOW(5)
000224 c00c      	RJMP _0x200003D
                 _0x200003C:
000225 35e8      	CPI  R30,LOW(0x58)
000226 f411      	BRNE _0x200003F
000227 6008      	ORI  R16,LOW(8)
000228 c003      	RJMP _0x2000040
                 _0x200003F:
000229 37e8      	CPI  R30,LOW(0x78)
00022a f009      	BREQ PC+2
00022b c0a1      	RJMP _0x2000071
                 _0x2000040:
00022c e5ee      	LDI  R30,LOW(_tbl16_G100*2)
00022d e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
00022e 83ee      	STD  Y+6,R30
00022f 83ff      	STD  Y+6+1,R31
000230 e014      	LDI  R17,LOW(4)
                 _0x200003D:
000231 ff02      	SBRS R16,2
000232 c014      	RJMP _0x2000042
000233 940e 03f9 	CALL SUBOPT_0x6
000235 940e 040f 	CALL SUBOPT_0x9
000237 85ab      	LDD  R26,Y+11
000238 23aa      	TST  R26
000239 f43a      	BRPL _0x2000043
00023a 85ea      	LDD  R30,Y+10
00023b 85fb      	LDD  R31,Y+10+1
00023c 940e 043a 	CALL __ANEGW1
00023e 87ea      	STD  Y+10,R30
00023f 87fb      	STD  Y+10+1,R31
000240 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
000241 3040      	CPI  R20,0
000242 f011      	BREQ _0x2000044
000243 5f1f      	SUBI R17,-LOW(1)
000244 c001      	RJMP _0x2000045
                 _0x2000044:
000245 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000246 c004      	RJMP _0x2000046
                 _0x2000042:
000247 940e 03f9 	CALL SUBOPT_0x6
000249 940e 040f 	CALL SUBOPT_0x9
                 _0x2000046:
                 _0x2000036:
00024b fd00      	SBRC R16,0
00024c c011      	RJMP _0x2000047
                 _0x2000048:
00024d 1715      	CP   R17,R21
00024e f478      	BRSH _0x200004A
00024f ff07      	SBRS R16,7
000250 c008      	RJMP _0x200004B
000251 ff02      	SBRS R16,2
000252 c004      	RJMP _0x200004C
000253 7f0b      	ANDI R16,LOW(251)
000254 2f24      	MOV  R18,R20
000255 5011      	SUBI R17,LOW(1)
000256 c001      	RJMP _0x200004D
                 _0x200004C:
000257 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000258 c001      	RJMP _0x200004E
                 _0x200004B:
000259 e220      	LDI  R18,LOW(32)
                 _0x200004E:
00025a 940e 03f2 	CALL SUBOPT_0x5
00025c 5051      	SUBI R21,LOW(1)
00025d cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
00025e 2f31      	MOV  R19,R17
00025f ff01      	SBRS R16,1
000260 c017      	RJMP _0x200004F
                 _0x2000050:
000261 3030      	CPI  R19,0
000262 f0a1      	BREQ _0x2000052
000263 ff03      	SBRS R16,3
000264 c006      	RJMP _0x2000053
000265 81ee      	LDD  R30,Y+6
000266 81ff      	LDD  R31,Y+6+1
000267 9125      	LPM  R18,Z+
000268 83ee      	STD  Y+6,R30
000269 83ff      	STD  Y+6+1,R31
00026a c005      	RJMP _0x2000054
                 _0x2000053:
00026b 81ae      	LDD  R26,Y+6
00026c 81bf      	LDD  R27,Y+6+1
00026d 912d      	LD   R18,X+
00026e 83ae      	STD  Y+6,R26
00026f 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000270 940e 03f2 	CALL SUBOPT_0x5
000272 3050      	CPI  R21,0
000273 f009      	BREQ _0x2000055
000274 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000275 5031      	SUBI R19,LOW(1)
000276 cfea      	RJMP _0x2000050
                 _0x2000052:
000277 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000278 e320      	LDI  R18,LOW(48)
000279 81ee      	LDD  R30,Y+6
00027a 81ff      	LDD  R31,Y+6+1
00027b 940e 0447 	CALL __GETW1PF
00027d 87e8      	STD  Y+8,R30
00027e 87f9      	STD  Y+8+1,R31
00027f 81ee      	LDD  R30,Y+6
000280 81ff      	LDD  R31,Y+6+1
000281 9632      	ADIW R30,2
000282 83ee      	STD  Y+6,R30
000283 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000284 85e8      	LDD  R30,Y+8
000285 85f9      	LDD  R31,Y+8+1
000286 85aa      	LDD  R26,Y+10
000287 85bb      	LDD  R27,Y+10+1
000288 17ae      	CP   R26,R30
000289 07bf      	CPC  R27,R31
00028a f050      	BRLO _0x200005C
00028b 5f2f      	SUBI R18,-LOW(1)
00028c 85a8      	LDD  R26,Y+8
00028d 85b9      	LDD  R27,Y+8+1
00028e 85ea      	LDD  R30,Y+10
00028f 85fb      	LDD  R31,Y+10+1
000290 1bea      	SUB  R30,R26
000291 0bfb      	SBC  R31,R27
000292 87ea      	STD  Y+10,R30
000293 87fb      	STD  Y+10+1,R31
000294 cfef      	RJMP _0x200005A
                 _0x200005C:
000295 332a      	CPI  R18,58
000296 f028      	BRLO _0x200005D
000297 ff03      	SBRS R16,3
000298 c002      	RJMP _0x200005E
000299 5f29      	SUBI R18,-LOW(7)
00029a c001      	RJMP _0x200005F
                 _0x200005E:
00029b 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
00029c fd04      	SBRC R16,4
00029d c01a      	RJMP _0x2000061
00029e 3321      	CPI  R18,49
00029f f420      	BRSH _0x2000063
0002a0 85a8      	LDD  R26,Y+8
0002a1 85b9      	LDD  R27,Y+8+1
0002a2 9711      	SBIW R26,1
0002a3 f409      	BRNE _0x2000062
                 _0x2000063:
0002a4 c009      	RJMP _0x20000CD
                 _0x2000062:
0002a5 1753      	CP   R21,R19
0002a6 f010      	BRLO _0x2000067
0002a7 ff00      	SBRS R16,0
0002a8 c001      	RJMP _0x2000068
                 _0x2000067:
0002a9 c013      	RJMP _0x2000066
                 _0x2000068:
0002aa e220      	LDI  R18,LOW(32)
0002ab ff07      	SBRS R16,7
0002ac c00b      	RJMP _0x2000069
0002ad e320      	LDI  R18,LOW(48)
                 _0x20000CD:
0002ae 6100      	ORI  R16,LOW(16)
0002af ff02      	SBRS R16,2
0002b0 c007      	RJMP _0x200006A
0002b1 7f0b      	ANDI R16,LOW(251)
0002b2 934a      	ST   -Y,R20
0002b3 940e 03ff 	CALL SUBOPT_0x7
0002b5 3050      	CPI  R21,0
0002b6 f009      	BREQ _0x200006B
0002b7 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0002b8 940e 03f2 	CALL SUBOPT_0x5
0002ba 3050      	CPI  R21,0
0002bb f009      	BREQ _0x200006C
0002bc 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0002bd 5031      	SUBI R19,LOW(1)
0002be 85a8      	LDD  R26,Y+8
0002bf 85b9      	LDD  R27,Y+8+1
0002c0 9712      	SBIW R26,2
0002c1 f008      	BRLO _0x2000059
0002c2 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0002c3 ff00      	SBRS R16,0
0002c4 c008      	RJMP _0x200006D
                 _0x200006E:
0002c5 3050      	CPI  R21,0
0002c6 f031      	BREQ _0x2000070
0002c7 5051      	SUBI R21,LOW(1)
0002c8 e2e0      	LDI  R30,LOW(32)
0002c9 93ea      	ST   -Y,R30
0002ca 940e 03ff 	CALL SUBOPT_0x7
0002cc cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0002cd e010      	LDI  R17,LOW(0)
                 _0x200001B:
0002ce cee0      	RJMP _0x2000016
                 _0x2000018:
0002cf 85ac      	LDD  R26,Y+12
0002d0 85bd      	LDD  R27,Y+12+1
0002d1 940e 0443 	CALL __GETW1P
0002d3 940e 0457 	CALL __LOADLOCR6
0002d5 9664      	ADIW R28,20
0002d6 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0002d7 92ff      	PUSH R15
0002d8 2ef8      	MOV  R15,R24
0002d9 9726      	SBIW R28,6
0002da 940e 0452 	CALL __SAVELOCR4
0002dc 940e 0417 	CALL SUBOPT_0xA
0002de 9730      	SBIW R30,0
0002df f419      	BRNE _0x2000072
0002e0 efef      	LDI  R30,LOW(65535)
0002e1 efff      	LDI  R31,HIGH(65535)
0002e2 c023      	RJMP _0x2080002
                 _0x2000072:
0002e3 01de      	MOVW R26,R28
0002e4 9616      	ADIW R26,6
0002e5 940e 0436 	CALL __ADDW2R15
0002e7 018d      	MOVW R16,R26
0002e8 940e 0417 	CALL SUBOPT_0xA
0002ea 83ee      	STD  Y+6,R30
0002eb 83ff      	STD  Y+6+1,R31
0002ec e0e0      	LDI  R30,LOW(0)
0002ed 87e8      	STD  Y+8,R30
0002ee 87e9      	STD  Y+8+1,R30
0002ef 01de      	MOVW R26,R28
0002f0 961a      	ADIW R26,10
0002f1 940e 0436 	CALL __ADDW2R15
0002f3 940e 0443 	CALL __GETW1P
0002f5 93fa      	ST   -Y,R31
0002f6 93ea      	ST   -Y,R30
0002f7 931a      	ST   -Y,R17
0002f8 930a      	ST   -Y,R16
0002f9 e6e3      	LDI  R30,LOW(_put_buff_G100)
0002fa e0f1      	LDI  R31,HIGH(_put_buff_G100)
0002fb 93fa      	ST   -Y,R31
0002fc 93ea      	ST   -Y,R30
0002fd 01de      	MOVW R26,R28
0002fe 961a      	ADIW R26,10
0002ff dea3      	RCALL __print_G100
000300 019f      	MOVW R18,R30
000301 81ae      	LDD  R26,Y+6
000302 81bf      	LDD  R27,Y+6+1
000303 e0e0      	LDI  R30,LOW(0)
000304 93ec      	ST   X,R30
000305 01f9      	MOVW R30,R18
                 _0x2080002:
000306 940e 0459 	CALL __LOADLOCR4
000308 962a      	ADIW R28,10
000309 90ff      	POP  R15
00030a 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
00030b 93aa      	ST   -Y,R26
00030c b3eb      	IN   R30,0x1B
00030d 70ef      	ANDI R30,LOW(0xF)
00030e 2fae      	MOV  R26,R30
00030f 81e8      	LD   R30,Y
000310 7fe0      	ANDI R30,LOW(0xF0)
000311 2bea      	OR   R30,R26
000312 bbeb      	OUT  0x1B,R30
                +
000313 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000314 958a     +DEC R24
000315 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000316 9ada      	SBI  0x1B,2
                +
000317 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000318 958a     +DEC R24
000319 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00031a 98da      	CBI  0x1B,2
                +
00031b e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00031c 958a     +DEC R24
00031d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00031e c089      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00031f 93aa      	ST   -Y,R26
000320 81a8      	LD   R26,Y
000321 dfe9      	RCALL __lcd_write_nibble_G101
000322 81e8          ld    r30,y
000323 95e2          swap  r30
000324 83e8          st    y,r30
000325 81a8      	LD   R26,Y
000326 dfe4      	RCALL __lcd_write_nibble_G101
                +
000327 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000328 958a     +DEC R24
000329 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00032a c07d      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00032b 93aa      	ST   -Y,R26
00032c 81e8      	LD   R30,Y
00032d e0f0      	LDI  R31,0
00032e 58e4      	SUBI R30,LOW(-__base_y_G101)
00032f 4ffe      	SBCI R31,HIGH(-__base_y_G101)
000330 81e0      	LD   R30,Z
000331 81a9      	LDD  R26,Y+1
000332 0fae      	ADD  R26,R30
000333 dfeb      	RCALL __lcd_write_data
000334 81e9      	LDD  R30,Y+1
000335 93e0 0180 	STS  __lcd_x,R30
000337 81e8      	LD   R30,Y
000338 93e0 0181 	STS  __lcd_y,R30
00033a 9622      	ADIW R28,2
00033b 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00033c e0a2      	LDI  R26,LOW(2)
00033d 940e 041e 	CALL SUBOPT_0xB
00033f e0ac      	LDI  R26,LOW(12)
000340 dfde      	RCALL __lcd_write_data
000341 e0a1      	LDI  R26,LOW(1)
000342 940e 041e 	CALL SUBOPT_0xB
000344 e0e0      	LDI  R30,LOW(0)
000345 93e0 0181 	STS  __lcd_y,R30
000347 93e0 0180 	STS  __lcd_x,R30
000349 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00034a 93aa      	ST   -Y,R26
00034b 81a8      	LD   R26,Y
00034c 30aa      	CPI  R26,LOW(0xA)
00034d f031      	BREQ _0x2020005
00034e 91e0 0182 	LDS  R30,__lcd_maxx
000350 91a0 0180 	LDS  R26,__lcd_x
000352 17ae      	CP   R26,R30
000353 f060      	BRLO _0x2020004
                 _0x2020005:
000354 e0e0      	LDI  R30,LOW(0)
000355 93ea      	ST   -Y,R30
000356 91a0 0181 	LDS  R26,__lcd_y
000358 5faf      	SUBI R26,-LOW(1)
000359 93a0 0181 	STS  __lcd_y,R26
00035b dfcf      	RCALL _lcd_gotoxy
00035c 81a8      	LD   R26,Y
00035d 30aa      	CPI  R26,LOW(0xA)
00035e f409      	BRNE _0x2020007
00035f c048      	RJMP _0x2080001
                 _0x2020007:
                 _0x2020004:
000360 91e0 0180 	LDS  R30,__lcd_x
000362 5fef      	SUBI R30,-LOW(1)
000363 93e0 0180 	STS  __lcd_x,R30
000365 9ad8      	SBI  0x1B,0
000366 81a8      	LD   R26,Y
000367 dfb7      	RCALL __lcd_write_data
000368 98d8      	CBI  0x1B,0
000369 c03e      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00036a 93ba      	ST   -Y,R27
00036b 93aa      	ST   -Y,R26
00036c 931a      	ST   -Y,R17
                 _0x2020008:
00036d 81a9      	LDD  R26,Y+1
00036e 81ba      	LDD  R27,Y+1+1
00036f 91ed      	LD   R30,X+
000370 83a9      	STD  Y+1,R26
000371 83ba      	STD  Y+1+1,R27
000372 2f1e      	MOV  R17,R30
000373 30e0      	CPI  R30,0
000374 f019      	BREQ _0x202000A
000375 2fa1      	MOV  R26,R17
000376 dfd3      	RCALL _lcd_putchar
000377 cff5      	RJMP _0x2020008
                 _0x202000A:
000378 8118      	LDD  R17,Y+0
000379 9623      	ADIW R28,3
00037a 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00037b 93aa      	ST   -Y,R26
00037c b3ea      	IN   R30,0x1A
00037d 6fe0      	ORI  R30,LOW(0xF0)
00037e bbea      	OUT  0x1A,R30
00037f 9ad2      	SBI  0x1A,2
000380 9ad0      	SBI  0x1A,0
000381 9ad1      	SBI  0x1A,1
000382 98da      	CBI  0x1B,2
000383 98d8      	CBI  0x1B,0
000384 98d9      	CBI  0x1B,1
000385 81e8      	LD   R30,Y
000386 93e0 0182 	STS  __lcd_maxx,R30
000388 58e0      	SUBI R30,-LOW(128)
                +
000389 93e0 017e+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
00038b 81e8      	LD   R30,Y
00038c 54e0      	SUBI R30,-LOW(192)
                +
00038d 93e0 017f+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
00038f e1a4      	LDI  R26,LOW(20)
000390 e0b0      	LDI  R27,0
000391 940e 042c 	CALL _delay_ms
000393 940e 0424 	CALL SUBOPT_0xC
000395 940e 0424 	CALL SUBOPT_0xC
000397 940e 0424 	CALL SUBOPT_0xC
000399 e2a0      	LDI  R26,LOW(32)
00039a df70      	RCALL __lcd_write_nibble_G101
                +
00039b ec88     +LDI R24 , LOW ( 200 )
00039c e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00039d 9701     +SBIW R24 , 1
00039e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00039f e2a8      	LDI  R26,LOW(40)
0003a0 df7e      	RCALL __lcd_write_data
0003a1 e0a4      	LDI  R26,LOW(4)
0003a2 df7c      	RCALL __lcd_write_data
0003a3 e8a5      	LDI  R26,LOW(133)
0003a4 df7a      	RCALL __lcd_write_data
0003a5 e0a6      	LDI  R26,LOW(6)
0003a6 df78      	RCALL __lcd_write_data
0003a7 df94      	RCALL _lcd_clear
                 _0x2080001:
0003a8 9621      	ADIW R28,1
0003a9 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0003aa 93ba      	ST   -Y,R27
0003ab 93aa      	ST   -Y,R26
0003ac 91a9          ld   r26,y+
0003ad 91b9          ld   r27,y+
0003ae 27ee          clr  r30
0003af 27ff          clr  r31
                 strlen0:
0003b0 916d          ld   r22,x+
0003b1 2366          tst  r22
0003b2 f011          breq strlen1
0003b3 9631          adiw r30,1
0003b4 cffb          rjmp strlen0
                 strlen1:
0003b5 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0003b6 93ba      	ST   -Y,R27
0003b7 93aa      	ST   -Y,R26
0003b8 27aa          clr  r26
0003b9 27bb          clr  r27
0003ba 91e9          ld   r30,y+
0003bb 91f9          ld   r31,y+
                 strlenf0:
0003bc 9005      	lpm  r0,z+
0003bd 2000          tst  r0
0003be f011          breq strlenf1
0003bf 9611          adiw r26,1
0003c0 cffb          rjmp strlenf0
                 strlenf1:
0003c1 01fd          movw r30,r26
0003c2 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _lcd_str:
000168           	.BYTE 0x14
                 __base_y_G101:
00017c           	.BYTE 0x4
                 __lcd_x:
000180           	.BYTE 0x1
                 __lcd_y:
000181           	.BYTE 0x1
                 __lcd_maxx:
000182           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
0003c3 940e 043e 	CALL __CWD1
0003c5 940e 044b 	CALL __PUTPARD1
0003c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x1:
0003c8 920a      	ST   -Y,R0
0003c9 921a      	ST   -Y,R1
0003ca 92fa      	ST   -Y,R15
0003cb 936a      	ST   -Y,R22
0003cc 937a      	ST   -Y,R23
0003cd 938a      	ST   -Y,R24
0003ce 939a      	ST   -Y,R25
0003cf 93aa      	ST   -Y,R26
0003d0 93ba      	ST   -Y,R27
0003d1 93ea      	ST   -Y,R30
0003d2 93fa      	ST   -Y,R31
0003d3 b7ef      	IN   R30,SREG
0003d4 93ea      	ST   -Y,R30
0003d5 e0e1      	LDI  R30,LOW(1)
0003d6 e0f0      	LDI  R31,HIGH(1)
0003d7 15ec      	CP   R30,R12
0003d8 05fd      	CPC  R31,R13
0003d9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
0003da 01f2      	MOVW R30,R4
0003db 9631      	ADIW R30,1
0003dc 012f      	MOVW R4,R30
0003dd e1e8      	LDI  R30,LOW(24)
0003de e0f0      	LDI  R31,HIGH(24)
0003df 15e4      	CP   R30,R4
0003e0 05f5      	CPC  R31,R5
0003e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
0003e2 01f3      	MOVW R30,R6
0003e3 9631      	ADIW R30,1
0003e4 013f      	MOVW R6,R30
0003e5 e3ec      	LDI  R30,LOW(60)
0003e6 e0f0      	LDI  R31,HIGH(60)
0003e7 15e6      	CP   R30,R6
0003e8 05f7      	CPC  R31,R7
0003e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
0003ea 01f4      	MOVW R30,R8
0003eb 9631      	ADIW R30,1
0003ec 014f      	MOVW R8,R30
0003ed e3ec      	LDI  R30,LOW(60)
0003ee e0f0      	LDI  R31,HIGH(60)
0003ef 15e8      	CP   R30,R8
0003f0 05f9      	CPC  R31,R9
0003f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x5:
0003f2 932a      	ST   -Y,R18
0003f3 85ad      	LDD  R26,Y+13
0003f4 85be      	LDD  R27,Y+13+1
0003f5 85ef      	LDD  R30,Y+15
0003f6 89f8      	LDD  R31,Y+15+1
0003f7 9509      	ICALL
0003f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
0003f9 89e8      	LDD  R30,Y+16
0003fa 89f9      	LDD  R31,Y+16+1
0003fb 9734      	SBIW R30,4
0003fc 8be8      	STD  Y+16,R30
0003fd 8bf9      	STD  Y+16+1,R31
0003fe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
0003ff 85ad      	LDD  R26,Y+13
000400 85be      	LDD  R27,Y+13+1
000401 85ef      	LDD  R30,Y+15
000402 89f8      	LDD  R31,Y+15+1
000403 9509      	ICALL
000404 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
000405 89a8      	LDD  R26,Y+16
000406 89b9      	LDD  R27,Y+16+1
000407 9614      	ADIW R26,4
000408 940e 0443 	CALL __GETW1P
00040a 83ee      	STD  Y+6,R30
00040b 83ff      	STD  Y+6+1,R31
00040c 81ae      	LDD  R26,Y+6
00040d 81bf      	LDD  R27,Y+6+1
00040e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
00040f 89a8      	LDD  R26,Y+16
000410 89b9      	LDD  R27,Y+16+1
000411 9614      	ADIW R26,4
000412 940e 0443 	CALL __GETW1P
000414 87ea      	STD  Y+10,R30
000415 87fb      	STD  Y+10+1,R31
000416 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
000417 01de      	MOVW R26,R28
000418 961c      	ADIW R26,12
000419 940e 0436 	CALL __ADDW2R15
00041b 940e 0443 	CALL __GETW1P
00041d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
00041e 940e 031f 	CALL __lcd_write_data
000420 e0a3      	LDI  R26,LOW(3)
000421 e0b0      	LDI  R27,0
000422 940c 042c 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xC:
000424 e3a0      	LDI  R26,LOW(48)
000425 940e 030b 	CALL __lcd_write_nibble_G101
                +
000427 ec88     +LDI R24 , LOW ( 200 )
000428 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000429 9701     +SBIW R24 , 1
00042a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00042b 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00042c 9610      	adiw r26,0
00042d f039      	breq __delay_ms1
                 __delay_ms0:
                +
00042e ed80     +LDI R24 , LOW ( 0x7D0 )
00042f e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000430 9701     +SBIW R24 , 1
000431 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000432 95a8      	wdr
000433 9711      	sbiw r26,1
000434 f7c9      	brne __delay_ms0
                 __delay_ms1:
000435 9508      	ret
                 
                 __ADDW2R15:
000436 2400      	CLR  R0
000437 0daf      	ADD  R26,R15
000438 1db0      	ADC  R27,R0
000439 9508      	RET
                 
                 __ANEGW1:
00043a 95f1      	NEG  R31
00043b 95e1      	NEG  R30
00043c 40f0      	SBCI R31,0
00043d 9508      	RET
                 
                 __CWD1:
00043e 2f6f      	MOV  R22,R31
00043f 0f66      	ADD  R22,R22
000440 0b66      	SBC  R22,R22
000441 2f76      	MOV  R23,R22
000442 9508      	RET
                 
                 __GETW1P:
000443 91ed      	LD   R30,X+
000444 91fc      	LD   R31,X
000445 9711      	SBIW R26,1
000446 9508      	RET
                 
                 __GETW1PF:
000447 9005      	LPM  R0,Z+
000448 91f4      	LPM  R31,Z
000449 2de0      	MOV  R30,R0
00044a 9508      	RET
                 
                 __PUTPARD1:
00044b 937a      	ST   -Y,R23
00044c 936a      	ST   -Y,R22
00044d 93fa      	ST   -Y,R31
00044e 93ea      	ST   -Y,R30
00044f 9508      	RET
                 
                 __SAVELOCR6:
000450 935a      	ST   -Y,R21
                 __SAVELOCR5:
000451 934a      	ST   -Y,R20
                 __SAVELOCR4:
000452 933a      	ST   -Y,R19
                 __SAVELOCR3:
000453 932a      	ST   -Y,R18
                 __SAVELOCR2:
000454 931a      	ST   -Y,R17
000455 930a      	ST   -Y,R16
000456 9508      	RET
                 
                 __LOADLOCR6:
000457 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000458 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000459 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00045a 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00045b 8119      	LDD  R17,Y+1
00045c 8108      	LD   R16,Y
00045d 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  14 r1 :   4 r2 :   0 r3 :   0 r4 :  10 r5 :   4 r6 :  10 r7 :   4 
r8 :  10 r9 :   4 r10:   5 r11:   2 r12:   9 r13:   6 r14:   0 r15:   7 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:  14 r23:   5 
r24:  26 r25:   8 r26: 106 r27:  41 r28:  14 r29:   1 r30: 263 r31:  93 
x  :  23 y  : 208 z  :  15 
Registers used: 32 out of 35 (91.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   4 
adiw  :  29 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  17 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  47 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  66 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  21 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :  17 cpc   :  15 cpi   :  33 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   6 inc   :   0 jmp   :  23 ld    :  41 ldd   :  75 ldi   : 132 
lds   :   4 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  16 movw  :  38 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   8 out   :  27 pop   :   1 push  :   1 rcall :  15 ret   :  31 
reti  :   2 rjmp  :  65 rol   :   0 ror   :   0 sbc   :   2 sbci  :   2 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :  22 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  87 std   :  31 sts   :   9 sub   :   1 subi  :  18 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 54 out of 116 (46.6%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0008bc   2160     76   2236   16384  13.6%
[.dseg] 0x000060 0x000183      0     35     35    1024   3.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 11 warnings
